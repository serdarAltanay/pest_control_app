// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// prisma/schema.prisma

enum VisitPeriod {
  HAFTALIK
  IKIHAFTALIK
  AYLIK
  IKIAYLIK
  UCAYLIK
  BELIRTILMEDI
}

enum PestType {
  KEMIRGEN
  HACCADI
  UCAN
  BELIRTILMEDI
}

enum PlaceType {
  OFIS
  DEPO
  MAGAZA
  FABRIKA
  BELIRTILMEDI
}

enum BiocideUnit {
  ML
  GR
  LT
  KG
  ADET
}

enum StationType {
  FARE_YEMLEME
  CANLI_YAKALAMA
  ELEKTRIKLI_SINEK_TUTUCU
  BOCEK_MONITOR
  GUVE_TUZAGI
}

enum VisitType {
  PERIYODIK
  ACIL_CAGRI
  ISTASYON_KURULUM
  ILK_ZIYARET
  DIGER
}

enum Ek1Status {
  DRAFT
  SUBMITTED
  APPROVED
}

enum ApplicationMethod {
  ULV
  PUSKURTME
  JEL
  SISLEME
  YENILEME
  ATOMIZER
  YEMLEME
  PULVERİZE
}

enum RiskLevel {
  RISK_YOK
  DUSUK
  ORTA
  YUKSEK
}

model StationActivation {
  id Int @id @default(autoincrement())

  storeId Int
  store   Store @relation("StoreActivations", fields: [storeId], references: [id], onDelete: Cascade)

  stationId Int
  station   Station @relation("StationActivations", fields: [stationId], references: [id], onDelete: Cascade)

  visitId Int?
  visit   Visit? @relation("VisitActivations", fields: [visitId], references: [id], onDelete: SetNull)

  type       StationType
  observedAt DateTime    @default(now())

  aktiviteVar Boolean?
  risk        RiskLevel @default(RISK_YOK)
  notes       String?

  deformeYem          Boolean?
  yemDegisti          Boolean?
  deformeMonitor      Boolean?
  monitorDegisti      Boolean?
  ulasilamayanMonitor Boolean?
  yapiskanDegisti     Boolean?

  sariBantDegisim Boolean?
  arizaliEFK      Boolean?
  tamirdeEFK      Boolean?
  uvLambaDegisim  Boolean?
  uvLambaAriza    Boolean?
  karasinek       Int?     @default(0)
  sivrisinek      Int?     @default(0)
  diger           Int?     @default(0)

  feromonDegisti    Boolean?
  deformeTuzak      Boolean?
  tuzakDegisti      Boolean?
  ulasilamayanTuzak Boolean?
  guve              Int?     @default(0)

  hedefZararliSayisi Int? @default(0)

  data      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([stationId, observedAt])
  @@index([storeId, observedAt])
  @@index([storeId, type, observedAt])
  @@index([storeId, risk, observedAt])
}

model ProviderProfile {
  id                Int      @id @default(1)
  companyName       String
  address           String?
  responsibleTitle  String?
  responsibleName   String?
  phoneFax          String?
  certificateSerial String?
  permissionNo      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Biocide {
  id               Int         @id @default(autoincrement())
  name             String
  activeIngredient String
  antidote         String
  unit             BiocideUnit
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  Ek1Line          Ek1Line[]

  @@unique([name, activeIngredient])
}

model Admin {
  id            Int        @id @default(autoincrement())
  fullName      String
  email         String     @unique
  password      String
  profileImage  String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  lastLoginAt   DateTime?
  lastProfileAt DateTime?
  lastSeenAt    DateTime?
  employees     Employee[]
}

model Employee {
  id            Int        @id @default(autoincrement())
  fullName      String
  email         String     @unique
  password      String
  jobTitle      String
  gsm           String
  profileImage  String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  lastLoginAt   DateTime?
  lastProfileAt DateTime?
  lastSeenAt    DateTime?
  adminId       Int?
  admin         Admin?     @relation(fields: [adminId], references: [id])
  customers     Customer[]
}

model Customer {
  id              Int     @id @default(autoincrement())
  code            String  @unique
  title           String
  accountingTitle String?
  email           String? @unique
  password        String?
  contactFullName String?
  phone           String?
  gsm             String?
  taxOffice       String?
  taxNumber       String?
  address         String?
  city            String?

  // ⬇️ BUNLAR KALDIRILDI: pestType, placeType
  showBalance Boolean     @default(false)
  visitPeriod VisitPeriod @default(BELIRTILMEDI)

  profileImage  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?
  lastProfileAt DateTime?
  lastSeenAt    DateTime?

  stores Store[]

  employeeId Int?
  employee   Employee? @relation(fields: [employeeId], references: [id])
}

model Store {
  id         Int      @id @default(autoincrement())
  customerId Int
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  name     String
  code     String?
  city     String?
  address  String?
  phone    String?
  manager  String?
  isActive Boolean @default(true)

  // ⬇️ operasyon bilgileri artık burada
  pestType  PestType  @default(BELIRTILMEDI)
  placeType PlaceType @default(BELIRTILMEDI)
  areaM2    Float?

  latitude  Decimal? @db.Decimal(10, 7)
  longitude Decimal? @db.Decimal(10, 7)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stations Station[] @relation("StoreStations")
  Visit    Visit[]

  activations     StationActivation[] @relation("StoreActivations")
  nonconformities Nonconformity[]

  @@unique([customerId, code], map: "store_customer_code_unique")
}

model Station {
  id        Int         @id @default(autoincrement())
  storeId   Int
  store     Store       @relation("StoreStations", fields: [storeId], references: [id], onDelete: Cascade)
  type      StationType
  name      String
  code      String
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  activations StationActivation[] @relation("StationActivations")

  @@unique([storeId, code])
}

model Nonconformity {
  id            Int       @id @default(autoincrement())
  storeId       Int
  title         String
  category      String // "HIJYEN", "YALITIM", "DEPOLAMA", "DIGER"
  notes         String?
  image         String? // ör: "uploads/nonconformities/12-tura/efk-...jpg"
  resolved      Boolean   @default(false)
  observedAt    DateTime  @default(now()) // formdaki "Tarih"
  createdAt     DateTime  @default(now())
  resolvedAt    DateTime?
  createdById   Int?
  createdByRole String?
  createdByName String?

  Store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@index([storeId])
}

model Visit {
  id          Int        @id @default(autoincrement())
  storeId     Int
  store       Store      @relation(fields: [storeId], references: [id], onDelete: Cascade)
  date        DateTime
  startTime   String?
  endTime     String?
  visitType   VisitType
  targetPests Json?
  notes       String?
  employees   Json?
  ek1Lines    Ek1Line[]
  ek1         Ek1Report?

  activations StationActivation[] @relation("VisitActivations")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ek1Report {
  id                 Int       @id @default(autoincrement())
  visitId            Int       @unique
  visit              Visit     @relation(fields: [visitId], references: [id], onDelete: Cascade)
  status             Ek1Status @default(DRAFT)
  pdfUrl             String?
  providerSignedAt   DateTime?
  providerSignerName String?
  customerSignedAt   DateTime?
  customerSignerName String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model Ek1Line {
  id         Int               @id @default(autoincrement())
  visitId    Int
  visit      Visit             @relation(fields: [visitId], references: [id], onDelete: Cascade)
  biosidalId Int
  biosidal   Biocide           @relation(fields: [biosidalId], references: [id], onDelete: Restrict)
  method     ApplicationMethod
  amount     Float
  createdAt  DateTime          @default(now())
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  role      String
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@unique([userId, role], name: "userId_role_unique")
}
